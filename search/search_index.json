{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dataverse utilities \u00b6 This is a generalized set of utilities which help with managing Dataverse repositories. These utilities are ad-hoc , written as needed and subject to change. That being said, the effort is being made to make this a useful library. Source code (and this documentation) is available at the Github repository https://github.com/ubc-library-rc/dataverse_utils , and the user-friendly version of the documentation is at https://ubc-library-rc.github.io/dataverse_utils . Installation \u00b6 Any installation will require the use of the command line/command prompt. The easiest installation is with pip : pip install git+https://github.com/ubc-library-rc/dataverse_utils@master Upgrading \u00b6 Upgrading is slightly different than the usual pip method, because it\u2019s not coming from pypi: pip install --upgrade git+https://github.com/ubc-library-rc/dataverse_utils@master Sadly, it\u2019s more to type than a normal pip upgrade string. Other methods of installing Python packages can be found at https://packaging.python.org/tutorials/installing-packages/ . If you have mkdocs installed, you can view the documentation in a web browser by running mkdocs from the top level directory of the Github repo by running mkdocs serve . The components \u00b6 Scripts \u00b6 There are six (6) scripts currently available. dv_del.py : Bulk (unpublished) file deletion utility dv_ldc_uploader.py : A utility which scrapes Linguistic Data Consortium metadata from their website, converts it to Dataverse JSON and uploads it, with the possibility of including local files. dv_manifest_gen.py : Creates a simple tab-separated value format file which can be edited and then used to upload files as well as file-level metadata. Normally files will be edited after creation, usually in a spreadsheet like Excel. dv_release.py : A bulk release utility. Either releases all the unreleased studies in a Dataverse or individually if persistent identifiers are available. dv_upload_tsv.py : Takes a tsv file in the format from dv_manifest_gen.py and does all the uploading and metadata entry. dv_pg_facet_date.py : A server-based tool which updates the publication date facet and performs a study reindex. More information about these can be found on the scripts page . Python library: dataverse_utils \u00b6 The default feature set from import dataverse_utils (or, more easily, import dataverse_utils as du is designed to work with data already present locally. The idea of this portion is to create a tsv file manifest for files which are to be uploaded to a Dataverse instance. Once the manifest is created, it\u2019s edited to add descriptive metadata, file paths and tags. Then, the manifest is used to upload those files to a an existing Dataverse study. import dataverse_utils as du du.dump_tsv('.', '/Users/you/tmp/testme.tsv') [Edit the .tsv at this stage here] du.upload_from_tsv(fil='/Users/you/tmp/testme.tsv', hdl='hdl:PERSIST/ID', dv='https://dataverse.invalid' apikey='IAM-YOUR-DVERSE-APIKEY') The tsv should be edited to have a description. Tags should be separated by commas in the \u201cTags\u201d column. If you are using relative paths, make sure that the script you are using is reading from the correct location. ldc \u00b6 The ldc component represents the Linguistic Data Consortium or LDC. The ldc module is designed to harvest LDC metadata from its catalogue, convert it to Dataverse JSON, then upload it to a Dataverse installation. Once the study has been created, the general dataverse_utils module can handle the file uploading. The ldc module requires the dryad2dataverse package. Because of this, it requires a tiny bit more effort, because LDC material doesn\u2019t have the required metadata. Here\u2019s snippet that shows how it works. import dataverse_utils.ldc as ldc ldc.ds.constants.DV_CONTACT_EMAIL='iamcontact@test.invalid' ldc.ds.constants.DV_CONTACT_NAME='Generic Support Email' KEY = 'IAM-YOUR-DVERSE-APIKEY' stud = 'LDC2021T02' #LDC study number a = ldc.Ldc(stud) a.fetch_record() #Data goes into the 'ldc' dataverse info = a.upload_metadata(url='https://dataverse.invalid', key=KEY, dv='ldc') hdl = info['data']['persistentId'] with open('/Users/you/tmp/testme.tsv') as fil: du.upload_from_tsv(fil, hdl=hdl,dv='https://dataverse.invalid', apikey=KEY) Note that one method uses key and the other apikey . This is what is known as ad hoc . More information is available at the API reference . Samples \u00b6 The sample directory contains Python scripts which demonstrate the usage of the dataverse_utils library. They\u2019re not necessarily complete examples or optimized. Or even present, intially. You know, ad_hoc .","title":"Overview"},{"location":"#dataverse-utilities","text":"This is a generalized set of utilities which help with managing Dataverse repositories. These utilities are ad-hoc , written as needed and subject to change. That being said, the effort is being made to make this a useful library. Source code (and this documentation) is available at the Github repository https://github.com/ubc-library-rc/dataverse_utils , and the user-friendly version of the documentation is at https://ubc-library-rc.github.io/dataverse_utils .","title":"Dataverse utilities"},{"location":"#installation","text":"Any installation will require the use of the command line/command prompt. The easiest installation is with pip : pip install git+https://github.com/ubc-library-rc/dataverse_utils@master","title":"Installation"},{"location":"#upgrading","text":"Upgrading is slightly different than the usual pip method, because it\u2019s not coming from pypi: pip install --upgrade git+https://github.com/ubc-library-rc/dataverse_utils@master Sadly, it\u2019s more to type than a normal pip upgrade string. Other methods of installing Python packages can be found at https://packaging.python.org/tutorials/installing-packages/ . If you have mkdocs installed, you can view the documentation in a web browser by running mkdocs from the top level directory of the Github repo by running mkdocs serve .","title":"Upgrading"},{"location":"#the-components","text":"","title":"The components"},{"location":"#scripts","text":"There are six (6) scripts currently available. dv_del.py : Bulk (unpublished) file deletion utility dv_ldc_uploader.py : A utility which scrapes Linguistic Data Consortium metadata from their website, converts it to Dataverse JSON and uploads it, with the possibility of including local files. dv_manifest_gen.py : Creates a simple tab-separated value format file which can be edited and then used to upload files as well as file-level metadata. Normally files will be edited after creation, usually in a spreadsheet like Excel. dv_release.py : A bulk release utility. Either releases all the unreleased studies in a Dataverse or individually if persistent identifiers are available. dv_upload_tsv.py : Takes a tsv file in the format from dv_manifest_gen.py and does all the uploading and metadata entry. dv_pg_facet_date.py : A server-based tool which updates the publication date facet and performs a study reindex. More information about these can be found on the scripts page .","title":"Scripts"},{"location":"#python-library-dataverse_utils","text":"The default feature set from import dataverse_utils (or, more easily, import dataverse_utils as du is designed to work with data already present locally. The idea of this portion is to create a tsv file manifest for files which are to be uploaded to a Dataverse instance. Once the manifest is created, it\u2019s edited to add descriptive metadata, file paths and tags. Then, the manifest is used to upload those files to a an existing Dataverse study. import dataverse_utils as du du.dump_tsv('.', '/Users/you/tmp/testme.tsv') [Edit the .tsv at this stage here] du.upload_from_tsv(fil='/Users/you/tmp/testme.tsv', hdl='hdl:PERSIST/ID', dv='https://dataverse.invalid' apikey='IAM-YOUR-DVERSE-APIKEY') The tsv should be edited to have a description. Tags should be separated by commas in the \u201cTags\u201d column. If you are using relative paths, make sure that the script you are using is reading from the correct location.","title":"Python library: dataverse_utils"},{"location":"#ldc","text":"The ldc component represents the Linguistic Data Consortium or LDC. The ldc module is designed to harvest LDC metadata from its catalogue, convert it to Dataverse JSON, then upload it to a Dataverse installation. Once the study has been created, the general dataverse_utils module can handle the file uploading. The ldc module requires the dryad2dataverse package. Because of this, it requires a tiny bit more effort, because LDC material doesn\u2019t have the required metadata. Here\u2019s snippet that shows how it works. import dataverse_utils.ldc as ldc ldc.ds.constants.DV_CONTACT_EMAIL='iamcontact@test.invalid' ldc.ds.constants.DV_CONTACT_NAME='Generic Support Email' KEY = 'IAM-YOUR-DVERSE-APIKEY' stud = 'LDC2021T02' #LDC study number a = ldc.Ldc(stud) a.fetch_record() #Data goes into the 'ldc' dataverse info = a.upload_metadata(url='https://dataverse.invalid', key=KEY, dv='ldc') hdl = info['data']['persistentId'] with open('/Users/you/tmp/testme.tsv') as fil: du.upload_from_tsv(fil, hdl=hdl,dv='https://dataverse.invalid', apikey=KEY) Note that one method uses key and the other apikey . This is what is known as ad hoc . More information is available at the API reference .","title":"ldc"},{"location":"#samples","text":"The sample directory contains Python scripts which demonstrate the usage of the dataverse_utils library. They\u2019re not necessarily complete examples or optimized. Or even present, intially. You know, ad_hoc .","title":"Samples"},{"location":"api_ref/","text":"API Reference \u00b6 dataverse_utils \u00b6 Generalized dataverse utilities dataverse_utils.dataverse_utils \u00b6 A collection of Dataverse utilities for file and metadata manipulation DvGeneralUploadError Objects \u00b6 class DvGeneralUploadError(Exception) Raised on non-200 URL response Md5Error Objects \u00b6 class Md5Error(Exception) Raised on md5 mismatch make_tsv \u00b6 make_tsv(start_dir, in_list=None, def_tag='Data', inc_header=True) -> str Recurses the tree for files and produces tsv output with with headers \u2018file\u2019, \u2018description\u2019, \u2018tags\u2019. The \u2018description\u2019 is the filename without an extension. Returns tsv as string. Arguments : start_dir : str Path to start directory in_list : list Input file list. Defaults to recursive walk of current directory. def_tag : str Default Dataverse tag (eg, Data, Documentation, etc) Separate tags with a comma: eg. (\u2018Data, 2016\u2019) inc_header : bool Include header row dump_tsv \u00b6 dump_tsv(start_dir, filename, in_list=None, def_tag='Data', inc_header=True) Dumps output of make_tsv manifest to a file. Arguments : start_dir : str Path to start directory in_list : list List of files for which to create manifest entries. Will default to recursive directory crawl def_tag : str Default Dataverse tag (eg, Data, Documentation, etc) Separate tags with an easily splitable character: eg. (\u2018Data, 2016\u2019) inc_header : bool Include header for tsv. file_path \u00b6 file_path(fpath, trunc='') -> str Create relative file path from full path string file_path(\u2018/tmp/Data/2011/excelfile.xlsx\u2019, \u2018/tmp/\u2019) \u2018Data/2011\u2019 file_path(\u2018/tmp/Data/2011/excelfile.xlsx\u2019, \u2018/tmp\u2019) \u2018Data/2011\u2019 Arguments : fpath : str File location (ie, complete path) trunc : str Leftmost portion of path to remove check_lock \u00b6 check_lock(dv_url, study, apikey) -> bool Checks study lock status; returns True if locked. Arguments : dvurl : str URL of Dataverse installation study - str Persistent ID of study apikey : str API key for user force_notab_unlock \u00b6 force_notab_unlock(study, dv_url, fid, apikey, try_uningest=True) -> int Forcibly unlocks and uningests to prevent tabular file processing. Required if mime and filename spoofing is not sufficient. Returns 0 if unlocked, file id if locked (and then unlocked). Arguments : study : str Persistent indentifer of study dv_url : str URL to base Dataverse installation fid : str File ID for file object apikey : str API key for user try_uningest : bool Try to uningest the file that was locked. - Default - True uningest_file \u00b6 uningest_file(dv_url, fid, apikey, study='n/a') Tries to uningest a file that has been ingested. Requires superuser API key. Arguments : dv_url : str URL to base Dataverse installation fid : int or str File ID of file to uningest apikey : str API key for superuser study : str Optional handle parameter for log messages upload_file \u00b6 upload_file(fpath, hdl, **kwargs) Uploads file to Dataverse study and sets file metadata and tags. Arguments : fpath : str file location (ie, complete path) hdl : str Dataverse persistent ID for study (handle or DOI) kwargs : dict other parameters. Acceptable keywords and contents are: dv : str REQUIRED url to base Dataverse installation - eg - \u2018https://abacus.library.ubc.ca\u2019 apikey : str REQUIRED API key for user descr : str OPTIONAL file description md5 : str OPTIONAL md5sum for file checking tags : list OPTIONAL list of text file tags. Eg [\u2018Data\u2019, \u2018June 2020\u2019] dirlabel : str OPTIONAL Unix style relative pathname for Dataverse file path: eg: path/to/file/ nowait : bool OPTIONAL Force a file unlock and uningest instead of waiting for processing to finish trunc : str OPTIONAL Leftmost portion of path to remove rest : bool OPTIONAL Restrict file. Defaults to false unless True supplied restrict_file \u00b6 restrict_file(**kwargs) Restrict file in Dataverse study. Arguments : kwargs : dict other parameters. Acceptable keywords and contents are: One of pid or fid is required pid : str file persistent ID fid : str file database ID dv : str REQUIRED url to base Dataverse installation - eg - \u2018https://abacus.library.ubc.ca\u2019 apikey : str REQUIRED API key for user rest : bool On True, restrict. Default True upload_from_tsv \u00b6 upload_from_tsv(fil, hdl, **kwargs) Utility for bulk uploading. Assumes fil is formatted as tsv with headers \u2018file\u2019, \u2018description\u2019, \u2018tags\u2019. \u2018tags\u2019 field will be split on commas. Arguments : fil : filelike object Open file object or io.IOStream() hdl : str Dataverse persistent ID for study (handle or DOI) trunc : str Leftmost portion of Dataverse study file path to remove. - eg - trunc =\u2019/home/user/\u2019 if the tsv field is \u2018/home/user/Data/ASCII\u2019 would set the path for that line of the tsv to \u2018Data/ASCII\u2019. Defaults to None. kwargs : dict other parameters. Acceptable keywords and contents are: dv : str REQUIRED url to base Dataverse installation - eg - \u2018https://abacus.library.ubc.ca\u2019 apikey : str REQUIRED API key for user rest : bool On True, restrict access. Default False dataverse_utils.ldc \u00b6 Creates dataverse JSON from Linguistic Data Consortium website page. Ldc Objects \u00b6 class Ldc(ds.Serializer) An LDC item (eg, LDC2021T01) __init__ \u00b6 | __init__(ldc) Returns a dict with keys created from an LDC catalogue web page. Arguments : ldc : str Linguistic Consortium Catalogue Number (eg. \u2018LDC2015T05\u2019. This is what forms the last part of the LDC catalogue URL. ldcJson \u00b6 | @property | ldcJson() Returns a JSON based on the LDC web page scraping dryadJson \u00b6 | @property | dryadJson() LDC metadata in Dryad JSON format dvJson \u00b6 | @property | dvJson() LDC metadata in Dataverse JSON format embargo \u00b6 | @property | embargo() Boolean indicating embargo status fileJson \u00b6 | @property | fileJson(timeout=45) Returns False: No attached files possible at LDC files \u00b6 | @property | files() Returns None. No files possible fetch_record \u00b6 | fetch_record(url=None, timeout=45) Downloads record from LDC website make_ldc_json \u00b6 | make_ldc_json() Returns a dict with keys created from an LDC catalogue web page. name_parser \u00b6 | @staticmethod | name_parser(name) Returns lastName/firstName JSON snippet from name Arguments : name : str A name make_dryad_json \u00b6 | make_dryad_json(ldc=None) Creates a Dryad-style dict from an LDC dictionary Arguments : ldc : dict Dictionary containing LDC data. Defaults to self.ldcJson find_block_index \u00b6 | @staticmethod | find_block_index(dvjson, key) Finds the index number of an item in Dataverse\u2019s idiotic JSON list Arguments : dvjson : dict Dataverse JSON key : str key for which to find list index make_dv_json \u00b6 | make_dv_json(ldc=None) Returns complete Dataverse JSON Arguments : ldc : dict LDC dictionary. Defaults to self.ldcJson upload_metadata \u00b6 | upload_metadata(**kwargs) -> dict Uploads metadata to dataverse Returns json from connection attempt. Arguments : kwargs: url : str base url to Dataverse key : str api key dv : str Dataverse to which it is being uploaded","title":"API reference"},{"location":"api_ref/#api-reference","text":"","title":"API Reference"},{"location":"api_ref/#dataverse_utils","text":"Generalized dataverse utilities","title":"dataverse_utils"},{"location":"api_ref/#dataverse_utilsdataverse_utils","text":"A collection of Dataverse utilities for file and metadata manipulation","title":"dataverse_utils.dataverse_utils"},{"location":"api_ref/#dvgeneraluploaderror-objects","text":"class DvGeneralUploadError(Exception) Raised on non-200 URL response","title":"DvGeneralUploadError Objects"},{"location":"api_ref/#md5error-objects","text":"class Md5Error(Exception) Raised on md5 mismatch","title":"Md5Error Objects"},{"location":"api_ref/#make_tsv","text":"make_tsv(start_dir, in_list=None, def_tag='Data', inc_header=True) -> str Recurses the tree for files and produces tsv output with with headers \u2018file\u2019, \u2018description\u2019, \u2018tags\u2019. The \u2018description\u2019 is the filename without an extension. Returns tsv as string. Arguments : start_dir : str Path to start directory in_list : list Input file list. Defaults to recursive walk of current directory. def_tag : str Default Dataverse tag (eg, Data, Documentation, etc) Separate tags with a comma: eg. (\u2018Data, 2016\u2019) inc_header : bool Include header row","title":"make_tsv"},{"location":"api_ref/#dump_tsv","text":"dump_tsv(start_dir, filename, in_list=None, def_tag='Data', inc_header=True) Dumps output of make_tsv manifest to a file. Arguments : start_dir : str Path to start directory in_list : list List of files for which to create manifest entries. Will default to recursive directory crawl def_tag : str Default Dataverse tag (eg, Data, Documentation, etc) Separate tags with an easily splitable character: eg. (\u2018Data, 2016\u2019) inc_header : bool Include header for tsv.","title":"dump_tsv"},{"location":"api_ref/#file_path","text":"file_path(fpath, trunc='') -> str Create relative file path from full path string file_path(\u2018/tmp/Data/2011/excelfile.xlsx\u2019, \u2018/tmp/\u2019) \u2018Data/2011\u2019 file_path(\u2018/tmp/Data/2011/excelfile.xlsx\u2019, \u2018/tmp\u2019) \u2018Data/2011\u2019 Arguments : fpath : str File location (ie, complete path) trunc : str Leftmost portion of path to remove","title":"file_path"},{"location":"api_ref/#check_lock","text":"check_lock(dv_url, study, apikey) -> bool Checks study lock status; returns True if locked. Arguments : dvurl : str URL of Dataverse installation study - str Persistent ID of study apikey : str API key for user","title":"check_lock"},{"location":"api_ref/#force_notab_unlock","text":"force_notab_unlock(study, dv_url, fid, apikey, try_uningest=True) -> int Forcibly unlocks and uningests to prevent tabular file processing. Required if mime and filename spoofing is not sufficient. Returns 0 if unlocked, file id if locked (and then unlocked). Arguments : study : str Persistent indentifer of study dv_url : str URL to base Dataverse installation fid : str File ID for file object apikey : str API key for user try_uningest : bool Try to uningest the file that was locked. - Default - True","title":"force_notab_unlock"},{"location":"api_ref/#uningest_file","text":"uningest_file(dv_url, fid, apikey, study='n/a') Tries to uningest a file that has been ingested. Requires superuser API key. Arguments : dv_url : str URL to base Dataverse installation fid : int or str File ID of file to uningest apikey : str API key for superuser study : str Optional handle parameter for log messages","title":"uningest_file"},{"location":"api_ref/#upload_file","text":"upload_file(fpath, hdl, **kwargs) Uploads file to Dataverse study and sets file metadata and tags. Arguments : fpath : str file location (ie, complete path) hdl : str Dataverse persistent ID for study (handle or DOI) kwargs : dict other parameters. Acceptable keywords and contents are: dv : str REQUIRED url to base Dataverse installation - eg - \u2018https://abacus.library.ubc.ca\u2019 apikey : str REQUIRED API key for user descr : str OPTIONAL file description md5 : str OPTIONAL md5sum for file checking tags : list OPTIONAL list of text file tags. Eg [\u2018Data\u2019, \u2018June 2020\u2019] dirlabel : str OPTIONAL Unix style relative pathname for Dataverse file path: eg: path/to/file/ nowait : bool OPTIONAL Force a file unlock and uningest instead of waiting for processing to finish trunc : str OPTIONAL Leftmost portion of path to remove rest : bool OPTIONAL Restrict file. Defaults to false unless True supplied","title":"upload_file"},{"location":"api_ref/#restrict_file","text":"restrict_file(**kwargs) Restrict file in Dataverse study. Arguments : kwargs : dict other parameters. Acceptable keywords and contents are: One of pid or fid is required pid : str file persistent ID fid : str file database ID dv : str REQUIRED url to base Dataverse installation - eg - \u2018https://abacus.library.ubc.ca\u2019 apikey : str REQUIRED API key for user rest : bool On True, restrict. Default True","title":"restrict_file"},{"location":"api_ref/#upload_from_tsv","text":"upload_from_tsv(fil, hdl, **kwargs) Utility for bulk uploading. Assumes fil is formatted as tsv with headers \u2018file\u2019, \u2018description\u2019, \u2018tags\u2019. \u2018tags\u2019 field will be split on commas. Arguments : fil : filelike object Open file object or io.IOStream() hdl : str Dataverse persistent ID for study (handle or DOI) trunc : str Leftmost portion of Dataverse study file path to remove. - eg - trunc =\u2019/home/user/\u2019 if the tsv field is \u2018/home/user/Data/ASCII\u2019 would set the path for that line of the tsv to \u2018Data/ASCII\u2019. Defaults to None. kwargs : dict other parameters. Acceptable keywords and contents are: dv : str REQUIRED url to base Dataverse installation - eg - \u2018https://abacus.library.ubc.ca\u2019 apikey : str REQUIRED API key for user rest : bool On True, restrict access. Default False","title":"upload_from_tsv"},{"location":"api_ref/#dataverse_utilsldc","text":"Creates dataverse JSON from Linguistic Data Consortium website page.","title":"dataverse_utils.ldc"},{"location":"api_ref/#ldc-objects","text":"class Ldc(ds.Serializer) An LDC item (eg, LDC2021T01)","title":"Ldc Objects"},{"location":"api_ref/#__init__","text":"| __init__(ldc) Returns a dict with keys created from an LDC catalogue web page. Arguments : ldc : str Linguistic Consortium Catalogue Number (eg. \u2018LDC2015T05\u2019. This is what forms the last part of the LDC catalogue URL.","title":"__init__"},{"location":"api_ref/#ldcjson","text":"| @property | ldcJson() Returns a JSON based on the LDC web page scraping","title":"ldcJson"},{"location":"api_ref/#dryadjson","text":"| @property | dryadJson() LDC metadata in Dryad JSON format","title":"dryadJson"},{"location":"api_ref/#dvjson","text":"| @property | dvJson() LDC metadata in Dataverse JSON format","title":"dvJson"},{"location":"api_ref/#embargo","text":"| @property | embargo() Boolean indicating embargo status","title":"embargo"},{"location":"api_ref/#filejson","text":"| @property | fileJson(timeout=45) Returns False: No attached files possible at LDC","title":"fileJson"},{"location":"api_ref/#files","text":"| @property | files() Returns None. No files possible","title":"files"},{"location":"api_ref/#fetch_record","text":"| fetch_record(url=None, timeout=45) Downloads record from LDC website","title":"fetch_record"},{"location":"api_ref/#make_ldc_json","text":"| make_ldc_json() Returns a dict with keys created from an LDC catalogue web page.","title":"make_ldc_json"},{"location":"api_ref/#name_parser","text":"| @staticmethod | name_parser(name) Returns lastName/firstName JSON snippet from name Arguments : name : str A name","title":"name_parser"},{"location":"api_ref/#make_dryad_json","text":"| make_dryad_json(ldc=None) Creates a Dryad-style dict from an LDC dictionary Arguments : ldc : dict Dictionary containing LDC data. Defaults to self.ldcJson","title":"make_dryad_json"},{"location":"api_ref/#find_block_index","text":"| @staticmethod | find_block_index(dvjson, key) Finds the index number of an item in Dataverse\u2019s idiotic JSON list Arguments : dvjson : dict Dataverse JSON key : str key for which to find list index","title":"find_block_index"},{"location":"api_ref/#make_dv_json","text":"| make_dv_json(ldc=None) Returns complete Dataverse JSON Arguments : ldc : dict LDC dictionary. Defaults to self.ldcJson","title":"make_dv_json"},{"location":"api_ref/#upload_metadata","text":"| upload_metadata(**kwargs) -> dict Uploads metadata to dataverse Returns json from connection attempt. Arguments : kwargs: url : str base url to Dataverse key : str api key dv : str Dataverse to which it is being uploaded","title":"upload_metadata"},{"location":"credits/","text":"Credits \u00b6 Dataverse_utils and their associated command line programs were written by Paul Lesack . Testing and UI suggestions from Jeremy Buhler . This is a product of the University of British Columbia Library Research Commons .","title":"Credits"},{"location":"credits/#credits","text":"Dataverse_utils and their associated command line programs were written by Paul Lesack . Testing and UI suggestions from Jeremy Buhler . This is a product of the University of British Columbia Library Research Commons .","title":"Credits"},{"location":"faq/","text":"Frequently asked questions \u00b6 \u201cFrequently\u201d may be relative. 1. I\u2019m using Windows and the scripts don\u2019t seem to be working/recognized by [choice of command line interface here] \u00b6 There are (at least) four different ways to get some sort of command line access. The traditional command line, PowerShell, via SSH and Git bash. That\u2019s not even including the linux subsystem. The document on Windows script troubles gives common solutions. 2. I am using Windows [7-10]. I\u2019ve installed via pip using a virtual environment, but they don\u2019t use my virtual environment\u2019s Python. \u00b6 What seems like a simple problem is surprisingly complex, as outlined here: https://matthew-brett.github.io/pydagogue/installing_scripts.html . This is further complicated by some other factors. If you have only one Python installation on your machine, you are probably OK. Mind you, if you\u2019re looking at this and that\u2019s the case, maybe I\u2019m wrong. If you have multiple Pythons, you can try changing your environment variables to point to the correct Python. If you are using ArcGIS products, ArcGIS may write items into your Windows registry which will associate any .py file with it\u2019s grossly outdated Python 2.7, or just the wrong Python. More specifically: Computer\\HKEY_CLASSES_ROOT\\Python.File\\shell\\open\\command in the Windows registry. Unfortunately, the Windows computer that I have available for testing (as I normally use Linux or Mac) does not have an administrator account, so I can\u2019t confirm that changing this key will work (although there\u2019s no reason to believe it won\u2019t). This is a pain. Is there something less irritating that would work? \u00b6 Yes, there is. You can still run the scripts manually. There are two options for this. Download the repository via git to a convenient place and use the files in the scripts/ directory Point your %PATH% to where the scripts are installed. To find out where they are installed: TLDR: version: Point your %PATH% (and use first part of the path) to point to your [venv]\\Scripts directory, because they\u2019re probably there. Long winded instructions/explanation: Start a Python session: import sys sys.path [x for x in sys.path if x.endswith(\u2018site-packages\u2019)] The location of the scripts will be written in [whatever the output of sys.path]/dataverse_utils[somestuff]egg-info/installed-files.txt , usually three levels up in the scripts directory. Ironically, this is also the location of the activate portion of the comand required to start a virtual environment (if you are using a virtual environment). For some background on this, venv in Linux and Mac versions of Python uses bin , and reserves scripts for the scripts directory. Windows, however, uses Scripts for the venv module, and to make it worse it\u2019s not usually case sensitive, so anything in scripts gets put into Scripts .","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"\u201cFrequently\u201d may be relative.","title":"Frequently asked questions"},{"location":"faq/#1-im-using-windows-and-the-scripts-dont-seem-to-be-workingrecognized-by-choice-of-command-line-interface-here","text":"There are (at least) four different ways to get some sort of command line access. The traditional command line, PowerShell, via SSH and Git bash. That\u2019s not even including the linux subsystem. The document on Windows script troubles gives common solutions.","title":"1. I'm using Windows and the scripts don't seem to be working/recognized by [choice of command line interface here]"},{"location":"faq/#2-i-am-using-windows-7-10-ive-installed-via-pip-using-a-virtual-environment-but-they-dont-use-my-virtual-environments-python","text":"What seems like a simple problem is surprisingly complex, as outlined here: https://matthew-brett.github.io/pydagogue/installing_scripts.html . This is further complicated by some other factors. If you have only one Python installation on your machine, you are probably OK. Mind you, if you\u2019re looking at this and that\u2019s the case, maybe I\u2019m wrong. If you have multiple Pythons, you can try changing your environment variables to point to the correct Python. If you are using ArcGIS products, ArcGIS may write items into your Windows registry which will associate any .py file with it\u2019s grossly outdated Python 2.7, or just the wrong Python. More specifically: Computer\\HKEY_CLASSES_ROOT\\Python.File\\shell\\open\\command in the Windows registry. Unfortunately, the Windows computer that I have available for testing (as I normally use Linux or Mac) does not have an administrator account, so I can\u2019t confirm that changing this key will work (although there\u2019s no reason to believe it won\u2019t).","title":"2. I am using Windows [7-10]. I've installed via pip using a virtual environment, but they don't use my virtual environment's Python."},{"location":"faq/#this-is-a-pain-is-there-something-less-irritating-that-would-work","text":"Yes, there is. You can still run the scripts manually. There are two options for this. Download the repository via git to a convenient place and use the files in the scripts/ directory Point your %PATH% to where the scripts are installed. To find out where they are installed: TLDR: version: Point your %PATH% (and use first part of the path) to point to your [venv]\\Scripts directory, because they\u2019re probably there. Long winded instructions/explanation: Start a Python session: import sys sys.path [x for x in sys.path if x.endswith(\u2018site-packages\u2019)] The location of the scripts will be written in [whatever the output of sys.path]/dataverse_utils[somestuff]egg-info/installed-files.txt , usually three levels up in the scripts directory. Ironically, this is also the location of the activate portion of the comand required to start a virtual environment (if you are using a virtual environment). For some background on this, venv in Linux and Mac versions of Python uses bin , and reserves scripts for the scripts directory. Windows, however, uses Scripts for the venv module, and to make it worse it\u2019s not usually case sensitive, so anything in scripts gets put into Scripts .","title":"This is a pain. Is there something less irritating that would work?"},{"location":"scripts/","text":"Utility scripts \u00b6 code { white-space : pre-wrap !important; } These scripts are available at the command line/command prompt and don\u2019t require any Python knowledge except how to install a Python library via pip, as outlined in the overview document. Once installed via pip, the scripts should be available via the command line and will not require calling Python explicitly. That is, they can be called from the command line directly. For example: dv_tsv_manifest.py is all you will need to type. Note that these programs have been primarily tested on Linux and MacOS, with Windows a tertiary priority . Windows is notable for its unusual file handling, so, as the MIT licenses stipulates, there is no warranty as to the suitability for a particular purpose. Of course, they should work. In no particular order: dv_del.py \u00b6 This is bulk deletion utility for unpublished studies (or even single studies). It\u2019s useful when your automated procedures have gone wrong, or if you don\u2019t feel like navigating through many menus. Note the -i switch which can ask for manual confirmation of deletions. Usage usage: dv_del.py [-h] -k KEY [-d DATAVERSE | -p PID] [-i] [-u DVURL] [--version] Delete draft studies from a Dataverse collection optional arguments: -h, --help show this help message and exit -k KEY, --key KEY Dataverse user API key -d DATAVERSE, --dataverse DATAVERSE Dataverse collection short name from which to delete all draft records. eg. \"ldc\" -p PID, --persistentId PID Handle or DOI to delete in format hdl:11272.1/FK2/12345 -i, --interactive Confirm each study deletion -u DVURL, --url DVURL URL to base Dataverse installation --version Show version number and exit dv_manifest_gen.py \u00b6 Not technically a Dataverse-specific script, this utility will generate a tab-separated value output. The file consists of 3 columns: file, description and tags . Editing the result and using the upload utility to parse the tsv will add descriptive metadata, tags and file paths to an upload instead of laboriously using the Dataverse GUI. Tags may be separated by commas, eg: \u201cData, SAS, June 2021\u201d. Using stdout and a redirect will also save time. First dump a file as normal. Add other files to the end with different information using the exclude header switch -x and different tags along with output redirection >> . Usage usage: dv_manifest_gen.py [-h] [-f FILENAME] [-t TAG] [-x] [-r] [-a] [--version] [files [files ...]] Creates a file manifest in tab separated value format which can then be edited and used for file uploads to a Dataverse collection. Files can be edited to add file descriptions and comma-separated tags that will be automatically attached to metadata using products using the dataverse_utils library. Will dump to stdout unless -f or --filename is used. Using the command and a dash (ie, \"dv_manifest_gen.py -\" produces full paths for some reason. positional arguments: files Files to add to manifest. Leaving it blank will add all files in the current directory. If using -r will recursively show all. optional arguments: -h, --help show this help message and exit -f FILENAME, --filename FILENAME Save to file instead of outputting to stdout -t TAG, --tag TAG Default tag(s). Separate with comma and use quotes if there are spaces. eg. \"Data, June 2021\". Defaults to \"Data\" -x, --no-header Don't include header in output. Useful if creating a complex tsv using redirects (ie, \">>\"). -r, --recursive Recursive listing. -a, --show-hidden Include hidden files. --version Show version number and exit dv_upload_tsv.py \u00b6 Now that you have a tsv full of nicely described data, you can easily upload it to an existing study if you know the persistent ID and have an API key. For the best metadata, you should probably edit it manually to add correct descriptive metadata, notably the \u201cDescription\u201d and \u201cTags\u201d. Tags are split separated by commas, so it\u2019s possible to have multiple tags for each data item, like \u201cData, SPSS, June 2021\u201d. File paths are automatically generated from the \u201cfile\u201d column. Because of this, you should probably use relative paths rather than absolute paths unless you want to have a lengthy path string in Dataverse. Usage usage: dv_upload_tsv.py [-h] -p PID -k KEY [-u URL] [-r] [-t TRUNCATE] [--version] [tsv] Uploads data sets to an *existing* Dataverse study from the contents of a TSV (tab separated value) file. Metadata, file tags, paths, etc are all read from the TSV. JSON output from the Dataverse API is printed to stdout during the process. positional arguments: tsv TSV file to upload optional arguments: -h, --help show this help message and exit -p PID, --pid PID Dataverse study persistent identifier (DOI/handle) -k KEY, --key KEY API key -u URL, --url URL Dataverse installation base url. defaults to \"https://abacus.library.ubc.ca\" -r, --restrict Restrict files after upload. -t TRUNCATE, --truncate TRUNCATE Left truncate file path. As Dataverse studies can retain directory structure, you can set an arbitrary starting point by removing the leftmost portion. Eg: if the TSV has a file path of /home/user/Data/file.txt, setting --truncate to \"/home/user\" would have file.txt in the Data directory in the Dataverse study. The file is still loaded from the path in the spreadsheet. Defaults to no truncation. --version Show version number and exit dv_release.py \u00b6 A bulk release utility for Dataverse. This utility will normally be used after a migration or large data transfer, such as a dryad2dataverse transfer from the Dryad data repository. It can release studies individually by persistent ID or just release all unreleased files in a Dataverse. Usage usage: dv_release.py [-h] [-u URL] -k KEY [-i] [--time STIME] [-v] [-r] [-d DV | -p PID [PID ...]] [--version] Bulk file releaser for unpublished Dataverse studies. Either releases individual studies or all unreleased studies in a single Dataverse collection. optional arguments: -h, --help show this help message and exit -u URL, --url URL Dataverse installation base URL. Default: https://abacus.library.ubc.ca -k KEY, --key KEY API key -i, --interactive Manually confirm each release --time STIME, -t STIME Time between release attempts in seconds. Default 10 -v Verbose mode -r, --dry-run Only output a list of studies to be released -d DV, --dv DV Short name of Dataverse collection to process (eg: statcan) -p PID [PID ...], --pid PID [PID ...] Handles or DOIs to release in format hdl:11272.1/FK2/12345 or doi:10.80240/FK2/NWRABI. Multiple values OK --version Show version number and exit dv_ldc_uploader.py \u00b6 This is a very specialized utility which will scrape metadata from the Linguistic Data Consortium (LDC) and create a metadata record in a Dataverse. The LDC does not have an API, so the metadata is scraped from their web site. This means that the metadata may not be quite as controlled as that which comes from an API. Data from the LDC website is converted to Dryad -style JSON via dataverse_utils.ldc via the use of the dryad2dataverse library. There are two main methods of use for this utility: Multiple metadata uploads. Multiple LDC record numbers can be supplied and a study without files will be created for each one. If a TSV file with file information is upplied via the -t or --tsv switch, the utility will upload a single LDC study and upload the contents of the tsv file to the created record. Usage usage: dv_ldc_uploader.py [-h] [-u URL] -k KEY [-d DVS] [-t TSV] [-n CNAME] [-e EMAIL] [-v] [--version] studies [studies ...] Linguistic Data Consortium metadata uploader for Dataverse. This utility will scrape the metadata from the LDC website (https://catalog.ldc.upenn.edu) and upload data based on a TSV manifest. Please note that this utility was built with the Abacus repository (https://abacus.library.ubc.ca) in mind, so many of the defaults are specific to that Dataverse installation. positional arguments: studies LDC Catalogue numbers to process, separated by spaces. eg. \"LDC2012T19 LDC2011T07\". Case is ignored, so \"ldc2012T19\" will also work. optional arguments: -h, --help show this help message and exit -u URL, --url URL Dataverse installation base URL. Defaults to \"https://abacus.library.ubc.ca\" -k KEY, --key KEY API key -d DVS, --dvs DVS Short name of target Dataverse collection (eg: ldc). Defaults to \"ldc\" -t TSV, --tsv TSV Manifest tsv file for uploading and metadata. If not supplied, only metadata will be uploaded. Using this option requires only one positional *studies* argument -n CNAME, --cname CNAME Study contact name. Default: \"Abacus support\" -e EMAIL, --email EMAIL Dataverse study contact email address. Default: abacus-support@lists.ubc.ca -v, --verbose Verbose output --version Show version number and exit dv_pg_facet_date.py \u00b6 This specialized tool is designed to be run on the server on which the Dataverse installation exists. When material is published in a Dataverse installation, the \u201cPublication Year\u201d facet in the Dataverse GUI is automatically populated with a date, which is the publication date in that Dataverse installation . This makes sense from the point of view of research data which is first deposited into a Dataverse installation, but fails as a finding aid for either; older data sets that have been migrated and reingested licensed data sets which may have been published years before they were purchased and ingested. For example, if you have a dataset that was published in 1971 but you only added it to your Dataverse installation in 2021, it is not necessarily intuitive to the end user that the \u201cpublication date\u201d in this instance would be 2021. Ideally, you might like it to be 1971. Unfortunately, there is no API-based tool to manage this date. The only way to change it, as of late 2021, is to modify the underlying PostgreSQL database directly with the desired date. Subsequently, the study must be reindexed so that the revised publication date appears as an option in the facet. This tool will perform those operations. However, the tool must be run on the server on which the Dataverse installation exists, as reindexing API calls must be from localhost and database access is necessarily restricted. There are a few other prerequisites for using this tool which differ from the rest of the scripts included in this package. The user must have shell access to the server hosting the Dataverse installation Python 3.6 or higher must be installed The user must possess a valid Dataverse API key The user must know the PostgreSQL password If the database name and user have been changed, the user must know this as well The script requires the manual installation of psycopg2-binary or have a successfully compiled psycopg2 package for Python. See https://www.psycopg.org/docs/ . This is not installed with the normal pip install of the dataverse_utils package as none of the other scripts require it and, in general, the odds of someone using this utility are low. If you forget to install it, the program will politely remind you. This cannot be stressed enough. This tool will directly change values within the PostgreSQL database which holds all of Dataverse\u2019s information . Use this at your own risk; no warranty is implied and no responsibility will be accepted for data loss, etc. If any of the items listed make no sense to you or sound like gibberish, do not use this tool. Because editing the underlying database may have a high pucker factor for some, there is both a dry-run option and an option to just dump out SQL instead of actually touching anything. These two options do not perform a study reindex and don\u2019t alter the contents of the database. Usage usage: dv_pg_facet_date.py [-h] [-d DBNAME] [-u USER] -p PASSWORD [-r | -o] [-s] -k KEY [-w URL] [--version] pids [pids ...] {distributionDate,productionDate,dateOfDeposit,dist,prod,dep} A utility to change the 'Production Date' web interface facet in a Dataverse installation to one of the three acceptable date types: 'distributionDate', 'productionDate', or 'dateOfDeposit'. This must be done in the PostgreSQL database directly, so this utility must be run on the *server* that hosts a Dataverse installation. Back up your database if you are unsure. positional arguments: pids persistentIdentifier {distributionDate,productionDate,dateOfDeposit,dist,prod,dep} date type which is to be shown in the facet. The short forms are aliases for the long forms. optional arguments: -h, --help show this help message and exit -d DBNAME, --dbname DBNAME Database name -u USER, --user USER PostgreSQL username -p PASSWORD, --password PASSWORD PostgreSQL password -r, --dry-run print proposed SQL to stdout -o, --sql-only dump sql to file called *pg_sql.sql* in current directory. Appends to file if it exists -s, --save-old Dump old values to tsv called *pg_changed.tsv* in current directory. Appends to file if it exists -k KEY, --key KEY API key for Dataverse installation. -w URL, --url URL URL for base Dataverse installation. Default https://abacus.library.ubc.ca --version Show version number and exit THIS WILL EDIT YOUR POSTGRESQL DATABASE DIRECTLY. USE AT YOUR OWN RISK. Notes for Windows users \u00b6 Command line scripts for Python may not necessarily behave the way they do in Linux/Mac, depending on how you access them. For detailed information on Windows systems, please see the Windows testing document","title":"Scripts"},{"location":"scripts/#utility-scripts","text":"code { white-space : pre-wrap !important; } These scripts are available at the command line/command prompt and don\u2019t require any Python knowledge except how to install a Python library via pip, as outlined in the overview document. Once installed via pip, the scripts should be available via the command line and will not require calling Python explicitly. That is, they can be called from the command line directly. For example: dv_tsv_manifest.py is all you will need to type. Note that these programs have been primarily tested on Linux and MacOS, with Windows a tertiary priority . Windows is notable for its unusual file handling, so, as the MIT licenses stipulates, there is no warranty as to the suitability for a particular purpose. Of course, they should work. In no particular order:","title":"Utility scripts"},{"location":"scripts/#dv_delpy","text":"This is bulk deletion utility for unpublished studies (or even single studies). It\u2019s useful when your automated procedures have gone wrong, or if you don\u2019t feel like navigating through many menus. Note the -i switch which can ask for manual confirmation of deletions. Usage usage: dv_del.py [-h] -k KEY [-d DATAVERSE | -p PID] [-i] [-u DVURL] [--version] Delete draft studies from a Dataverse collection optional arguments: -h, --help show this help message and exit -k KEY, --key KEY Dataverse user API key -d DATAVERSE, --dataverse DATAVERSE Dataverse collection short name from which to delete all draft records. eg. \"ldc\" -p PID, --persistentId PID Handle or DOI to delete in format hdl:11272.1/FK2/12345 -i, --interactive Confirm each study deletion -u DVURL, --url DVURL URL to base Dataverse installation --version Show version number and exit","title":"dv_del.py"},{"location":"scripts/#dv_manifest_genpy","text":"Not technically a Dataverse-specific script, this utility will generate a tab-separated value output. The file consists of 3 columns: file, description and tags . Editing the result and using the upload utility to parse the tsv will add descriptive metadata, tags and file paths to an upload instead of laboriously using the Dataverse GUI. Tags may be separated by commas, eg: \u201cData, SAS, June 2021\u201d. Using stdout and a redirect will also save time. First dump a file as normal. Add other files to the end with different information using the exclude header switch -x and different tags along with output redirection >> . Usage usage: dv_manifest_gen.py [-h] [-f FILENAME] [-t TAG] [-x] [-r] [-a] [--version] [files [files ...]] Creates a file manifest in tab separated value format which can then be edited and used for file uploads to a Dataverse collection. Files can be edited to add file descriptions and comma-separated tags that will be automatically attached to metadata using products using the dataverse_utils library. Will dump to stdout unless -f or --filename is used. Using the command and a dash (ie, \"dv_manifest_gen.py -\" produces full paths for some reason. positional arguments: files Files to add to manifest. Leaving it blank will add all files in the current directory. If using -r will recursively show all. optional arguments: -h, --help show this help message and exit -f FILENAME, --filename FILENAME Save to file instead of outputting to stdout -t TAG, --tag TAG Default tag(s). Separate with comma and use quotes if there are spaces. eg. \"Data, June 2021\". Defaults to \"Data\" -x, --no-header Don't include header in output. Useful if creating a complex tsv using redirects (ie, \">>\"). -r, --recursive Recursive listing. -a, --show-hidden Include hidden files. --version Show version number and exit","title":"dv_manifest_gen.py"},{"location":"scripts/#dv_upload_tsvpy","text":"Now that you have a tsv full of nicely described data, you can easily upload it to an existing study if you know the persistent ID and have an API key. For the best metadata, you should probably edit it manually to add correct descriptive metadata, notably the \u201cDescription\u201d and \u201cTags\u201d. Tags are split separated by commas, so it\u2019s possible to have multiple tags for each data item, like \u201cData, SPSS, June 2021\u201d. File paths are automatically generated from the \u201cfile\u201d column. Because of this, you should probably use relative paths rather than absolute paths unless you want to have a lengthy path string in Dataverse. Usage usage: dv_upload_tsv.py [-h] -p PID -k KEY [-u URL] [-r] [-t TRUNCATE] [--version] [tsv] Uploads data sets to an *existing* Dataverse study from the contents of a TSV (tab separated value) file. Metadata, file tags, paths, etc are all read from the TSV. JSON output from the Dataverse API is printed to stdout during the process. positional arguments: tsv TSV file to upload optional arguments: -h, --help show this help message and exit -p PID, --pid PID Dataverse study persistent identifier (DOI/handle) -k KEY, --key KEY API key -u URL, --url URL Dataverse installation base url. defaults to \"https://abacus.library.ubc.ca\" -r, --restrict Restrict files after upload. -t TRUNCATE, --truncate TRUNCATE Left truncate file path. As Dataverse studies can retain directory structure, you can set an arbitrary starting point by removing the leftmost portion. Eg: if the TSV has a file path of /home/user/Data/file.txt, setting --truncate to \"/home/user\" would have file.txt in the Data directory in the Dataverse study. The file is still loaded from the path in the spreadsheet. Defaults to no truncation. --version Show version number and exit","title":"dv_upload_tsv.py"},{"location":"scripts/#dv_releasepy","text":"A bulk release utility for Dataverse. This utility will normally be used after a migration or large data transfer, such as a dryad2dataverse transfer from the Dryad data repository. It can release studies individually by persistent ID or just release all unreleased files in a Dataverse. Usage usage: dv_release.py [-h] [-u URL] -k KEY [-i] [--time STIME] [-v] [-r] [-d DV | -p PID [PID ...]] [--version] Bulk file releaser for unpublished Dataverse studies. Either releases individual studies or all unreleased studies in a single Dataverse collection. optional arguments: -h, --help show this help message and exit -u URL, --url URL Dataverse installation base URL. Default: https://abacus.library.ubc.ca -k KEY, --key KEY API key -i, --interactive Manually confirm each release --time STIME, -t STIME Time between release attempts in seconds. Default 10 -v Verbose mode -r, --dry-run Only output a list of studies to be released -d DV, --dv DV Short name of Dataverse collection to process (eg: statcan) -p PID [PID ...], --pid PID [PID ...] Handles or DOIs to release in format hdl:11272.1/FK2/12345 or doi:10.80240/FK2/NWRABI. Multiple values OK --version Show version number and exit","title":"dv_release.py"},{"location":"scripts/#dv_ldc_uploaderpy","text":"This is a very specialized utility which will scrape metadata from the Linguistic Data Consortium (LDC) and create a metadata record in a Dataverse. The LDC does not have an API, so the metadata is scraped from their web site. This means that the metadata may not be quite as controlled as that which comes from an API. Data from the LDC website is converted to Dryad -style JSON via dataverse_utils.ldc via the use of the dryad2dataverse library. There are two main methods of use for this utility: Multiple metadata uploads. Multiple LDC record numbers can be supplied and a study without files will be created for each one. If a TSV file with file information is upplied via the -t or --tsv switch, the utility will upload a single LDC study and upload the contents of the tsv file to the created record. Usage usage: dv_ldc_uploader.py [-h] [-u URL] -k KEY [-d DVS] [-t TSV] [-n CNAME] [-e EMAIL] [-v] [--version] studies [studies ...] Linguistic Data Consortium metadata uploader for Dataverse. This utility will scrape the metadata from the LDC website (https://catalog.ldc.upenn.edu) and upload data based on a TSV manifest. Please note that this utility was built with the Abacus repository (https://abacus.library.ubc.ca) in mind, so many of the defaults are specific to that Dataverse installation. positional arguments: studies LDC Catalogue numbers to process, separated by spaces. eg. \"LDC2012T19 LDC2011T07\". Case is ignored, so \"ldc2012T19\" will also work. optional arguments: -h, --help show this help message and exit -u URL, --url URL Dataverse installation base URL. Defaults to \"https://abacus.library.ubc.ca\" -k KEY, --key KEY API key -d DVS, --dvs DVS Short name of target Dataverse collection (eg: ldc). Defaults to \"ldc\" -t TSV, --tsv TSV Manifest tsv file for uploading and metadata. If not supplied, only metadata will be uploaded. Using this option requires only one positional *studies* argument -n CNAME, --cname CNAME Study contact name. Default: \"Abacus support\" -e EMAIL, --email EMAIL Dataverse study contact email address. Default: abacus-support@lists.ubc.ca -v, --verbose Verbose output --version Show version number and exit","title":"dv_ldc_uploader.py"},{"location":"scripts/#dv_pg_facet_datepy","text":"This specialized tool is designed to be run on the server on which the Dataverse installation exists. When material is published in a Dataverse installation, the \u201cPublication Year\u201d facet in the Dataverse GUI is automatically populated with a date, which is the publication date in that Dataverse installation . This makes sense from the point of view of research data which is first deposited into a Dataverse installation, but fails as a finding aid for either; older data sets that have been migrated and reingested licensed data sets which may have been published years before they were purchased and ingested. For example, if you have a dataset that was published in 1971 but you only added it to your Dataverse installation in 2021, it is not necessarily intuitive to the end user that the \u201cpublication date\u201d in this instance would be 2021. Ideally, you might like it to be 1971. Unfortunately, there is no API-based tool to manage this date. The only way to change it, as of late 2021, is to modify the underlying PostgreSQL database directly with the desired date. Subsequently, the study must be reindexed so that the revised publication date appears as an option in the facet. This tool will perform those operations. However, the tool must be run on the server on which the Dataverse installation exists, as reindexing API calls must be from localhost and database access is necessarily restricted. There are a few other prerequisites for using this tool which differ from the rest of the scripts included in this package. The user must have shell access to the server hosting the Dataverse installation Python 3.6 or higher must be installed The user must possess a valid Dataverse API key The user must know the PostgreSQL password If the database name and user have been changed, the user must know this as well The script requires the manual installation of psycopg2-binary or have a successfully compiled psycopg2 package for Python. See https://www.psycopg.org/docs/ . This is not installed with the normal pip install of the dataverse_utils package as none of the other scripts require it and, in general, the odds of someone using this utility are low. If you forget to install it, the program will politely remind you. This cannot be stressed enough. This tool will directly change values within the PostgreSQL database which holds all of Dataverse\u2019s information . Use this at your own risk; no warranty is implied and no responsibility will be accepted for data loss, etc. If any of the items listed make no sense to you or sound like gibberish, do not use this tool. Because editing the underlying database may have a high pucker factor for some, there is both a dry-run option and an option to just dump out SQL instead of actually touching anything. These two options do not perform a study reindex and don\u2019t alter the contents of the database. Usage usage: dv_pg_facet_date.py [-h] [-d DBNAME] [-u USER] -p PASSWORD [-r | -o] [-s] -k KEY [-w URL] [--version] pids [pids ...] {distributionDate,productionDate,dateOfDeposit,dist,prod,dep} A utility to change the 'Production Date' web interface facet in a Dataverse installation to one of the three acceptable date types: 'distributionDate', 'productionDate', or 'dateOfDeposit'. This must be done in the PostgreSQL database directly, so this utility must be run on the *server* that hosts a Dataverse installation. Back up your database if you are unsure. positional arguments: pids persistentIdentifier {distributionDate,productionDate,dateOfDeposit,dist,prod,dep} date type which is to be shown in the facet. The short forms are aliases for the long forms. optional arguments: -h, --help show this help message and exit -d DBNAME, --dbname DBNAME Database name -u USER, --user USER PostgreSQL username -p PASSWORD, --password PASSWORD PostgreSQL password -r, --dry-run print proposed SQL to stdout -o, --sql-only dump sql to file called *pg_sql.sql* in current directory. Appends to file if it exists -s, --save-old Dump old values to tsv called *pg_changed.tsv* in current directory. Appends to file if it exists -k KEY, --key KEY API key for Dataverse installation. -w URL, --url URL URL for base Dataverse installation. Default https://abacus.library.ubc.ca --version Show version number and exit THIS WILL EDIT YOUR POSTGRESQL DATABASE DIRECTLY. USE AT YOUR OWN RISK.","title":"dv_pg_facet_date.py"},{"location":"scripts/#notes-for-windows-users","text":"Command line scripts for Python may not necessarily behave the way they do in Linux/Mac, depending on how you access them. For detailed information on Windows systems, please see the Windows testing document","title":"Notes for Windows users"},{"location":"windows/","text":"Running the dataverse_utils scripts under Windows \u00b6 On Mac and Linux, running the scripts supplied with dataverse_utils is straightforward. They\u2019re available at the command line, which means that you can simply run them by (for example): $ dv_manifest_gen.py followed by switches and variables as normal. Doing this results in output to the terminal window. This is not necessarily the case in Windows . This test case uses a new installation of https://python.org Python, v.3.9.6, installed in Windows using the GUI, so it\u2019s as basic a Windows installation as you can get. In this instance, dataverse_utils were installed using pip from the PowerShell, ie pip install git+https://github.com/ubc-library-rc/dataverse_utils . However, pip should be pip regardless of which console you use to install. Here\u2019s a handy guide to show the results of how/if the command line scripts run. This example uses dv_manifest.gen.py , but appears to be generally applicable to any scripts configured with setuptools.setup() (ie, setuptools.setup(scripts=[whatever] ). If this means nothing to you because you\u2019re not distributing your own Python packages,, just skip to the table below. Windows Terminal type \u00b6 PowerShell \u00b6 Note that on these tests the user is not an administrator . Administrator results, in all likelihood, will be completely different, ideally better. Problem Attempting to run the script results in a window popping up for a nanosecond and no output. Solution This may not occur if the PowerShell is run as an administrator. What is happening here is that the script is running, but it\u2019s showing up in a separate window. Output can be created as normal, if you use the correct switches. Unfortunately, you won\u2019t be able to see what they are, because the popup window disappears, which is not helpful. There are three potential fixes. If you can run PowerShell as an administrator, that may solve the problem. Edit the PATHEXT environment variable to include the .py extension. Note that if the user PATHEXT is edited, the system will ignore the system PATHEXT, meaning that things like .exe files won\u2019t run unless the full name is typed (eg. \u2018notepad.exe\u2019). So, if editing the user PATHEXT, make sure to include the system PATHEXT and append ;.PY to the string. Edit the PATHEXT for PowerShell itself, rather than on a system wide level. Editing $PROFILE to include the .py extension should allow the Python script to run within PowerShell. For instructions, see https://docs.microsoft.com/en-ca/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.1 . Create a profile as per How to create a profile Within that profile, $env:PATHEXT += \";.py\" Depending on the nature of your Windows installation, this may be disabled by the security policy, in which case you can also try the method above. Command prompt \u00b6 This is the traditional Windows command prompt (ie, cmd.exe ). The scripts should just work after being installed with pip, as this installation is the default. For example, run with: C:\\>dv_manifest_gen.py [arguments] Obviously it don\u2019t type the C:\\> part. SSH session \u00b6 If using the built-in Windows SSH server, scripts should simply run as per the command prompt above. Windows SSH sessions default to using the Windows command prompt, not bash. Bash sessions under SSH should function if Bash is configured as below. Git Bash \u00b6 Git Bash is part of the git suite available here: https://git-scm.com/downloads . There are a few notable wrinkles with for use with Python. During installation of Git After v2.32.0.2 (and possibly earlier), you will have the option during the installation to \u201cEnable experimental support for pseudo consoles\u201d. Doing this will allow you run Python directly from the bash shell like you would normally, and the scripts should function as per the command prompt above. As a bonus, enabling this feature seems to fix errors with pipes which formerly resulted in the stdout is not a tty error when piping shell output (for instance, to grep ). If you have not checked this box, you will need to add an alias to your .bashrc and/or .bash_profile : alias python='winpty python' alias pip='winpty pip' Either that, or you will need to start Python with winpty python , which is annoying. Similarly winpty pip . Even if you have not enabled pseudo-console support and didn\u2019t complete use option 2, the scripts should still function normally though. Having scripts work but Python not work is not optimal and confusing, so a solution is there even though it technically isn\u2019t required. There are many options for Git Bash installation; testing has not covered all possible permutations of installation options.","title":"Running the dataverse_utils scripts under Windows"},{"location":"windows/#running-the-dataverse_utils-scripts-under-windows","text":"On Mac and Linux, running the scripts supplied with dataverse_utils is straightforward. They\u2019re available at the command line, which means that you can simply run them by (for example): $ dv_manifest_gen.py followed by switches and variables as normal. Doing this results in output to the terminal window. This is not necessarily the case in Windows . This test case uses a new installation of https://python.org Python, v.3.9.6, installed in Windows using the GUI, so it\u2019s as basic a Windows installation as you can get. In this instance, dataverse_utils were installed using pip from the PowerShell, ie pip install git+https://github.com/ubc-library-rc/dataverse_utils . However, pip should be pip regardless of which console you use to install. Here\u2019s a handy guide to show the results of how/if the command line scripts run. This example uses dv_manifest.gen.py , but appears to be generally applicable to any scripts configured with setuptools.setup() (ie, setuptools.setup(scripts=[whatever] ). If this means nothing to you because you\u2019re not distributing your own Python packages,, just skip to the table below.","title":"Running the dataverse_utils scripts under Windows"},{"location":"windows/#windows-terminal-type","text":"","title":"Windows Terminal type"},{"location":"windows/#powershell","text":"Note that on these tests the user is not an administrator . Administrator results, in all likelihood, will be completely different, ideally better. Problem Attempting to run the script results in a window popping up for a nanosecond and no output. Solution This may not occur if the PowerShell is run as an administrator. What is happening here is that the script is running, but it\u2019s showing up in a separate window. Output can be created as normal, if you use the correct switches. Unfortunately, you won\u2019t be able to see what they are, because the popup window disappears, which is not helpful. There are three potential fixes. If you can run PowerShell as an administrator, that may solve the problem. Edit the PATHEXT environment variable to include the .py extension. Note that if the user PATHEXT is edited, the system will ignore the system PATHEXT, meaning that things like .exe files won\u2019t run unless the full name is typed (eg. \u2018notepad.exe\u2019). So, if editing the user PATHEXT, make sure to include the system PATHEXT and append ;.PY to the string. Edit the PATHEXT for PowerShell itself, rather than on a system wide level. Editing $PROFILE to include the .py extension should allow the Python script to run within PowerShell. For instructions, see https://docs.microsoft.com/en-ca/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.1 . Create a profile as per How to create a profile Within that profile, $env:PATHEXT += \";.py\" Depending on the nature of your Windows installation, this may be disabled by the security policy, in which case you can also try the method above.","title":"PowerShell"},{"location":"windows/#command-prompt","text":"This is the traditional Windows command prompt (ie, cmd.exe ). The scripts should just work after being installed with pip, as this installation is the default. For example, run with: C:\\>dv_manifest_gen.py [arguments] Obviously it don\u2019t type the C:\\> part.","title":"Command prompt"},{"location":"windows/#ssh-session","text":"If using the built-in Windows SSH server, scripts should simply run as per the command prompt above. Windows SSH sessions default to using the Windows command prompt, not bash. Bash sessions under SSH should function if Bash is configured as below.","title":"SSH session"},{"location":"windows/#git-bash","text":"Git Bash is part of the git suite available here: https://git-scm.com/downloads . There are a few notable wrinkles with for use with Python. During installation of Git After v2.32.0.2 (and possibly earlier), you will have the option during the installation to \u201cEnable experimental support for pseudo consoles\u201d. Doing this will allow you run Python directly from the bash shell like you would normally, and the scripts should function as per the command prompt above. As a bonus, enabling this feature seems to fix errors with pipes which formerly resulted in the stdout is not a tty error when piping shell output (for instance, to grep ). If you have not checked this box, you will need to add an alias to your .bashrc and/or .bash_profile : alias python='winpty python' alias pip='winpty pip' Either that, or you will need to start Python with winpty python , which is annoying. Similarly winpty pip . Even if you have not enabled pseudo-console support and didn\u2019t complete use option 2, the scripts should still function normally though. Having scripts work but Python not work is not optimal and confusing, so a solution is there even though it technically isn\u2019t required. There are many options for Git Bash installation; testing has not covered all possible permutations of installation options.","title":"Git Bash"}]}